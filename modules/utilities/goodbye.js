// Goodbye utility - Handle goodbye messages when members leave
const { EmbedBuilder } = require('discord.js');
const config = require('../../config.json');
const memoryOptimizer = require('../../utils/memoryOptimizer');

module.exports = {
    name: 'goodbye',
    description: 'X·ª≠ l√Ω tin nh·∫Øn t·∫°m bi·ªát khi th√†nh vi√™n r·ªùi m√°y ch·ªß',
    
    // Define events this utility handles
    events: [
        {
            name: 'guildMemberRemove',
            /**
             * Handle member leaving
             * @param {Client} client Discord client
             * @param {GuildMember} member Guild member who left
             */
            execute: async (client, member) => {
                try {
                    // Ensure this only runs in guilds
                    if (!member.guild) return;
                    
                    console.log(`Th√†nh vi√™n ƒë√£ r·ªùi: ${member.user.tag}`);
                    
                    // Get goodbye channel
                    const goodbyeChannel = member.guild.channels.cache.get(config.goodbyeChannelId) || 
                                           member.guild.systemChannel;
                    
                    if (!goodbyeChannel) {
                        console.warn(`Kh√¥ng th·ªÉ t√¨m th·∫•y k√™nh t·∫°m bi·ªát cho m√°y ch·ªß ${member.guild.name}`);
                        return;
                    }
                    
                    // Calculate how long the user was in the server
                    const joinedTimestamp = member.joinedTimestamp;
                    let memberDuration = '';
                    
                    if (joinedTimestamp) {
                        const duration = Date.now() - joinedTimestamp;
                        memberDuration = formatDuration(duration);
                    } else {
                        memberDuration = 'Kh√¥ng x√°c ƒë·ªãnh';
                    }
                    
                    // Create goodbye embed
                    const embed = new EmbedBuilder()
                        .setColor('#e74c3c')
                        .setTitle('Th√†nh vi√™n ƒë√£ r·ªùi')
                        .setDescription(`**${member.user.tag}** ƒë√£ r·ªùi kh·ªèi m√°y ch·ªß.`)
                        .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
                        .addFields(
                            { 
                                name: 'üë• S·ªë th√†nh vi√™n hi·ªán t·∫°i', 
                                value: `${member.guild.memberCount} th√†nh vi√™n`,
                                inline: true 
                            },
                            { 
                                name: '‚è±Ô∏è Th·ªùi gian trong m√°y ch·ªß', 
                                value: memberDuration,
                                inline: true 
                            }
                        )
                        .setTimestamp()
                        .setFooter({ text: 'H·ªá th·ªëng t·∫°m bi·ªát', iconURL: client.user.displayAvatarURL() });
                    
                    // Send goodbye message
                    await goodbyeChannel.send({ embeds: [embed] });
                    
                    // Optimize memory usage
                    memoryOptimizer.optimizeObject(embed);
                } catch (error) {
                    console.error('L·ªói trong s·ª± ki·ªán t·∫°m bi·ªát:', error);
                }
            }
        }
    ]
};

/**
 * Format duration in milliseconds to a readable string
 * @param {number} ms Duration in milliseconds
 * @returns {string} Formatted duration string
 */
function formatDuration(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    const months = Math.floor(days / 30);
    const years = Math.floor(months / 12);
    
    if (years > 0) {
        return `${years} nƒÉm v√† ${months % 12} th√°ng`;
    } else if (months > 0) {
        return `${months} th√°ng v√† ${days % 30} ng√†y`;
    } else if (days > 0) {
        return `${days} ng√†y v√† ${hours % 24} gi·ªù`;
    } else if (hours > 0) {
        return `${hours} gi·ªù v√† ${minutes % 60} ph√∫t`;
    } else if (minutes > 0) {
        return `${minutes} ph√∫t v√† ${seconds % 60} gi√¢y`;
    } else {
        return `${seconds} gi√¢y`;
    }
}
